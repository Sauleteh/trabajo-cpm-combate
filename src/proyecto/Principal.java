/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto;

import java.awt.Color;
import javax.swing.JColorChooser;

/**
 *
 * @author UO279176
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    private Inicial VInicial;
    private ElegirHeroe VElegirHeroe;
    private ElegirEnemigo VElegirEnemigo;
    
    private Personaje heroe;
    private Personaje enemigo;
            
    public Principal() {
        initComponents();
        
        VInicial = new Inicial(this);
        VElegirHeroe = new ElegirHeroe(this);
        VElegirEnemigo = new ElegirEnemigo(this);
        
        setHeroe("Guerrero", 168, 35, 14, 10, 5);
        setEnemigo("Zombie", 125, 20, 25, 0, 0);
        seCambioPersonaje();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BGColores = new javax.swing.ButtonGroup();
        BElegirHeroe = new javax.swing.JButton();
        BElegirEnemigo = new javax.swing.JButton();
        BLuchar = new javax.swing.JButton();
        BAtacar = new javax.swing.JButton();
        BDefender = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TACombate = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        LVidaCombateH = new javax.swing.JLabel();
        LNombreH = new javax.swing.JLabel();
        LVidaH = new javax.swing.JLabel();
        LAtaqueH = new javax.swing.JLabel();
        LDefensaH = new javax.swing.JLabel();
        LProbCritH = new javax.swing.JLabel();
        LFatigaH = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        LFatigaCombateH = new javax.swing.JLabel();
        LFatigaE = new javax.swing.JLabel();
        LProbCritE = new javax.swing.JLabel();
        LDefensaE = new javax.swing.JLabel();
        LAtaqueE = new javax.swing.JLabel();
        LVidaE = new javax.swing.JLabel();
        LNombreE = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        LVidaCombateE = new javax.swing.JLabel();
        LFatigaCombateE = new javax.swing.JLabel();
        CBIAAvanzada = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MICerrarJuego = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        CBMIIAAvanzada = new javax.swing.JCheckBoxMenuItem();
        MColorArea = new javax.swing.JMenu();
        RBMIRojo = new javax.swing.JRadioButtonMenuItem();
        RBMIAmarillo = new javax.swing.JRadioButtonMenuItem();
        RBMIBlanco = new javax.swing.JRadioButtonMenuItem();
        RBPersonalizado = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(424, 600));
        setMinimumSize(new java.awt.Dimension(424, 0));

        BElegirHeroe.setText("Elegir héroe");
        BElegirHeroe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BElegirHeroeActionPerformed(evt);
            }
        });

        BElegirEnemigo.setText("Elegir enemigo");
        BElegirEnemigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BElegirEnemigoActionPerformed(evt);
            }
        });

        BLuchar.setText("¡Luchar!");
        BLuchar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLucharActionPerformed(evt);
            }
        });

        BAtacar.setText("Atacar");
        BAtacar.setEnabled(false);
        BAtacar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BAtacarActionPerformed(evt);
            }
        });

        BDefender.setText("Defender");
        BDefender.setEnabled(false);
        BDefender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BDefenderActionPerformed(evt);
            }
        });

        TACombate.setEditable(false);
        TACombate.setColumns(20);
        TACombate.setRows(5);
        jScrollPane1.setViewportView(TACombate);

        jLabel1.setText("Vida:");

        LVidaCombateH.setText("0/0");

        LNombreH.setText("Nombre: Null");

        LVidaH.setText("Vida: 0");

        LAtaqueH.setText("Ataque: 0");

        LDefensaH.setText("Defensa: 0");

        LProbCritH.setText("Prob. crítica: 0 ");

        LFatigaH.setText("Fatiga inicial: 0");

        jLabel11.setText("Fatiga:");

        LFatigaCombateH.setText("Null");

        LFatigaE.setText("Fatiga inicial: 0");

        LProbCritE.setText("Prob. crítica: 0");

        LDefensaE.setText("Defensa: 0");

        LAtaqueE.setText("Ataque: 0");

        LVidaE.setText("Vida: 0");

        LNombreE.setText("Nombre: Null");

        jLabel21.setText("Vida:");

        jLabel22.setText("Fatiga:");

        LVidaCombateE.setText("0/0");

        LFatigaCombateE.setText("Null");

        CBIAAvanzada.setText("Modo IA avanzada");
        CBIAAvanzada.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBIAAvanzadaItemStateChanged(evt);
            }
        });
        CBIAAvanzada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBIAAvanzadaActionPerformed(evt);
            }
        });

        jMenu1.setText("Ventana");

        MICerrarJuego.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MICerrarJuego.setText("Cerrar juego");
        MICerrarJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MICerrarJuegoActionPerformed(evt);
            }
        });
        jMenu1.add(MICerrarJuego);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("IA");

        CBMIIAAvanzada.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, 0));
        CBMIIAAvanzada.setText("Modo IA Avanzada");
        CBMIIAAvanzada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBMIIAAvanzadaActionPerformed(evt);
            }
        });
        jMenu2.add(CBMIIAAvanzada);

        MColorArea.setText("Color del área (Solo en IA avanzada)");
        MColorArea.setEnabled(false);

        BGColores.add(RBMIRojo);
        RBMIRojo.setSelected(true);
        RBMIRojo.setText("Rojo");
        RBMIRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBMIRojoActionPerformed(evt);
            }
        });
        MColorArea.add(RBMIRojo);

        BGColores.add(RBMIAmarillo);
        RBMIAmarillo.setText("Amarillo");
        RBMIAmarillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBMIAmarilloActionPerformed(evt);
            }
        });
        MColorArea.add(RBMIAmarillo);

        BGColores.add(RBMIBlanco);
        RBMIBlanco.setText("Blanco");
        RBMIBlanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBMIBlancoActionPerformed(evt);
            }
        });
        MColorArea.add(RBMIBlanco);

        BGColores.add(RBPersonalizado);
        RBPersonalizado.setText("Personalizado");
        RBPersonalizado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBPersonalizadoActionPerformed(evt);
            }
        });
        MColorArea.add(RBPersonalizado);

        jMenu2.add(MColorArea);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LAtaqueH)
                            .addComponent(LDefensaH)
                            .addComponent(LProbCritH)
                            .addComponent(LFatigaH)
                            .addComponent(BElegirHeroe, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LNombreH)
                            .addComponent(LVidaH))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BElegirEnemigo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LNombreE)
                            .addComponent(LVidaE)
                            .addComponent(LAtaqueE)
                            .addComponent(LDefensaE)
                            .addComponent(LProbCritE)
                            .addComponent(LFatigaE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(LVidaCombateH))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LFatigaCombateH)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BAtacar, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BDefender))
                            .addComponent(BLuchar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(LVidaCombateE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LFatigaCombateE)
                            .addComponent(jLabel22))))
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CBIAAvanzada)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BElegirHeroe)
                    .addComponent(BElegirEnemigo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LNombreH)
                    .addComponent(LNombreE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LVidaH)
                    .addComponent(LVidaE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LAtaqueH)
                    .addComponent(LAtaqueE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LDefensaH)
                    .addComponent(LDefensaE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LProbCritH)
                    .addComponent(LProbCritE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LFatigaH)
                    .addComponent(LFatigaE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CBIAAvanzada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LFatigaCombateH)
                            .addComponent(LVidaCombateH)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BLuchar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BAtacar)
                            .addComponent(BDefender)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LFatigaCombateE)
                            .addComponent(LVidaCombateE))))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Color C;
    private Color rojoClaro = new Color(255, 143, 143);
    private Color amarilloClaro = new Color(255, 253, 138);
    private Color personalizado = new Color(255, 255, 255);
    private void CBIAAvanzadaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBIAAvanzadaItemStateChanged
        // TODO add your handling code here:
        MColorArea.setEnabled(CBIAAvanzada.isSelected());
        if (CBIAAvanzada.isSelected())
        {
            System.out.println("Código IA Avanzada seleccionada");
            if (RBMIRojo.isSelected()) C = rojoClaro;
            else if (RBMIAmarillo.isSelected()) C = amarilloClaro;
            else if (RBMIBlanco.isSelected()) C = Color.WHITE;
            else C = personalizado;
            
            enemigo.setVida(enemigo.getVida() * 2);
        }
        else
        {
            System.out.println("Código IA Avanzada deseleccionada");
            C = Color.WHITE;
            
            enemigo.setVida(enemigo.getVida() / 2);
        }
        if (C != null) TACombate.setBackground(C);
        seCambioPersonaje();
    }//GEN-LAST:event_CBIAAvanzadaItemStateChanged

    private void CBMIIAAvanzadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBMIIAAvanzadaActionPerformed
        // TODO add your handling code here:
        CBIAAvanzada.setSelected(!CBIAAvanzada.isSelected());
    }//GEN-LAST:event_CBMIIAAvanzadaActionPerformed

    private void CBIAAvanzadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBIAAvanzadaActionPerformed
        // TODO add your handling code here:
        CBMIIAAvanzada.setSelected(!CBMIIAAvanzada.isSelected());
    }//GEN-LAST:event_CBIAAvanzadaActionPerformed

    private void MICerrarJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MICerrarJuegoActionPerformed
        // TODO add your handling code here:
        System.exit(1);
    }//GEN-LAST:event_MICerrarJuegoActionPerformed

    private void RBMIRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBMIRojoActionPerformed
        // TODO add your handling code here:
        TACombate.setBackground(rojoClaro);
    }//GEN-LAST:event_RBMIRojoActionPerformed

    private void RBMIAmarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBMIAmarilloActionPerformed
        // TODO add your handling code here:
        TACombate.setBackground(amarilloClaro);
    }//GEN-LAST:event_RBMIAmarilloActionPerformed

    private void RBMIBlancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBMIBlancoActionPerformed
        // TODO add your handling code here:
        TACombate.setBackground(Color.WHITE);
    }//GEN-LAST:event_RBMIBlancoActionPerformed

    private void BElegirHeroeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BElegirHeroeActionPerformed
        // TODO add your handling code here:
        VElegirHeroe.setVisible(true);
    }//GEN-LAST:event_BElegirHeroeActionPerformed

    private void RBPersonalizadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBPersonalizadoActionPerformed
        // TODO add your handling code here:
        personalizado = JColorChooser.showDialog(null, "Color del panel", personalizado);
        if (personalizado != null) TACombate.setBackground(personalizado);
    }//GEN-LAST:event_RBPersonalizadoActionPerformed

    private void BElegirEnemigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BElegirEnemigoActionPerformed
        // TODO add your handling code here:
        VElegirEnemigo.setVisible(true);
    }//GEN-LAST:event_BElegirEnemigoActionPerformed

    private void BLucharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLucharActionPerformed
        // TODO add your handling code here:
        BLuchar.setEnabled(false);
        BAtacar.setEnabled(true);
        BDefender.setEnabled(true);
        CBIAAvanzada.setEnabled(false);
        CBMIIAAvanzada.setEnabled(false);
        BElegirHeroe.setEnabled(false);
        BElegirEnemigo.setEnabled(false);
        VElegirHeroe.setVisible(false);
        VElegirEnemigo.setVisible(false);
        
        heroe.setVidaActual(heroe.getVida());
        heroe.setFatigaActual(heroe.getFatigaI());
        
        enemigo.setVidaActual(enemigo.getVida());
        enemigo.setFatigaActual(enemigo.getFatigaI());
        
        TACombate.setText("¡Comienza la batalla legendaria entre el héroe " + heroe.getNombre() + "\ny el enemigo " + enemigo.getNombre() + ", que gane el mejor!\n");
        TACombate.setText(TACombate.getText() + "Es el turno de " + heroe.getNombre() + ", decide si atacar o defenderte.\n");
        
    }//GEN-LAST:event_BLucharActionPerformed

    /**
     * Cálculo de la probabilidad de acierto
     * @param fatiga es la fatiga actual del personaje que ataca
     * @return true si no fallará, false en el otro caso
     */
    private boolean aciertaElGolpe(int fatiga)
    {
        return fatiga < Dice.roll(100);
    }
    private boolean haceCritico(int crit)
    {
        return crit+1 > Dice.roll(100);
    }
    
    private boolean estaVivo(Personaje p)
    {
        return p.getVidaActual() > 0;
    }
    
    private void atacar1a2(Personaje p1, Personaje p2, boolean seDefiende)
    {
        int golpe, recuperado;
        boolean critico1, critico2;
        
        if (aciertaElGolpe(p1.getFatigaActual()))
        {
            p1.setFatigaActual((p1.getFatigaActual() + p1.getFatigaI()) > 100 ? 100 : p1.getFatigaActual() + p1.getFatigaI() ); // Aumentar la fatiga
            
            critico1 = haceCritico(p1.getProbCrit());
            critico2 = haceCritico(p2.getProbCrit());
            
            if (critico1 && critico2 && seDefiende)   // Ambos hacen crítico
            {
                golpe = p1.getVidaActual() - (int)(p1.getAtaque() * (1 - (p2.getDefensa() * 1.75 / 100)));
                p1.setVidaActual(golpe);
                TACombate.setText(TACombate.getText() + "\n¡" + p1.getNombre() + " ataca a " + p2.getNombre() + " con un gran golpe crítico! pero... ¡" + p2.getNombre() + " se defiende de forma perfecta y le devuelve el ataque crítico!\n" + p1.getNombre() + " recibe " + (int)(p1.getAtaque() * (1 - (p2.getDefensa() * 1.75 / 100))) + " de daño");
            }
            else if (critico1)  // p1 hace el crítico
            {
                if (seDefiende) // p2 se ha defendido este turno
                {
                    golpe = p2.getVidaActual() - (p1.getAtaque() * 2);
                    p2.setVidaActual(golpe);
                    TACombate.setText(TACombate.getText() + "\n" + p1.getNombre() + " ataca a " + p2.getNombre() + " y se defiende, ¡pero resultó ser un ataque crítico!\nA " + p2.getNombre() + " se le rompe la defensa recibiendo " + (p1.getAtaque() * 2) + " de daño");
                }
                else    // p2 no se defiende en este turno
                {
                    golpe = p2.getVidaActual() - (p1.getAtaque() * 2);
                    p2.setVidaActual(golpe);
                    TACombate.setText(TACombate.getText() + "\n¡" + p1.getNombre() + " ataca a " + p2.getNombre() + " con un ataque crítico!\n" + p2.getNombre() + " recibe " + (p1.getAtaque() * 2) + " de daño");
                }
            }
            else if (critico2 && seDefiende)  // p2 hace el crítico
            {
                    golpe = p1.getVidaActual() - (int)((p1.getAtaque() * (1 - (p2.getDefensa() * 1.75 / 100))) / 2);
                    p1.setVidaActual(golpe);
                    TACombate.setText(TACombate.getText() + "\n" + p1.getNombre() + " ataca a " + p2.getNombre() + " y se defiende, ¡pero resultó ser una defensa perfecta y le devuelve el ataque!\n" + p1.getNombre() + " recibe " + (int)((p1.getAtaque() * (1 - (p2.getDefensa() * 1.75 / 100))) / 2) + " de daño");
            }
            else    // Ninguno hace un crítico
            {
                if (seDefiende) // p2 se ha defendido este turno
                {
                    golpe = p2.getVidaActual() - (int)(p1.getAtaque() * (1 - (p2.getDefensa() * 1.75 / 100)));
                    p2.setVidaActual(golpe);
                    TACombate.setText(TACombate.getText() + "\n" + p1.getNombre() + " ataca a " + p2.getNombre() + " y se defiende, recibiendo " + (int)(p1.getAtaque() * (1 - (p2.getDefensa() * 1.75 / 100))) + " de daño");
                }
                else    // p2 no se defiende en este turno
                {
                    golpe = p2.getVidaActual() - (int)(p1.getAtaque() * (1 - (p2.getDefensa() / 100)));
                    p2.setVidaActual(golpe);
                    TACombate.setText(TACombate.getText() + "\n" + p1.getNombre() + " ataca a " + p2.getNombre() + " y recibe " + (int)(p1.getAtaque() * (1 - (p2.getDefensa() / 100))) + " de daño");
                }
            }
            
            if (seDefiende && estaVivo(p2))
            {
                    recuperado = p2.getFatigaActual() - (int)(p2.getFatigaI() * 1.75);
                    p2.setFatigaActual((recuperado < 0) ? 0 : recuperado);  // Recuperar la fatiga al defenderse
                    TACombate.setText(TACombate.getText() + "\n" + p2.getNombre() + " recupera " + (int)(p2.getFatigaI() * 1.75) + " de fatiga");
            }
        }
        else    // Por culpa de la fatiga, fallas el ataque
        {
            TACombate.setText(TACombate.getText() + "\n" + p1.getNombre() + " falla el golpe, pierde un 20% de su vida actual y se recupera de la fatiga");
            p1.setFatigaActual(p1.getFatigaI());
            
            if (p1.getVidaActual() > 1) p1.setVidaActual((int)(p1.getVidaActual() * 0.8));
            
            if (seDefiende)
            {
                recuperado = p2.getFatigaActual() - (int)(p2.getFatigaI() * 1.75);
                p2.setFatigaActual((recuperado < 0) ? 0 : recuperado);  // Recuperar la fatiga al defenderse
                TACombate.setText(TACombate.getText() + "\n" + p2.getNombre() + " se defiende pero no recibió ningún daño\n" + p2.getNombre() + " recupera " + (int)(p2.getFatigaI() * 1.75) + " de fatiga");
            }
        }
    }
    
    private void BAtacarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BAtacarActionPerformed
        // TODO add your handling code here:
        boolean enemigoDefiende = Dice.roll(2)-1 == 1;  // [0,1], si sale 0 no defiende y si sale 1 sí
        // Atacar al enemigo
        atacar1a2(heroe, enemigo, enemigoDefiende);
        
        if (!(estaVivo(heroe)) || !(estaVivo(enemigo))) // Si ya ha muerto alguien...
        {
            if (!(estaVivo(heroe))) // Enemigo es el único vivo
            {
                // Imprimir la vida actual
                LVidaCombateH.setText(0 + "/" + heroe.getVida());
                LVidaCombateE.setText(enemigo.getVidaActual() + "/" + enemigo.getVida());
                
                // Informar sobre la derrota o victoria
                TACombate.setText(TACombate.getText() + "\n" + heroe.getNombre() + " ha sufrido una derrota a manos de " + enemigo.getNombre() + ",\nel combate ha terminado en derrota...");
            }
            else
            {
                // Imprimir la vida actual
                LVidaCombateH.setText(heroe.getVidaActual() + "/" + heroe.getVida());
                LVidaCombateE.setText(0 + "/" + enemigo.getVida());
                TACombate.setText(TACombate.getText() + "\n" + enemigo.getNombre() + " ha sufrido una derrota a manos de " + heroe.getNombre() + ",\nel combate ha terminado en victoria. ¡Felicidades!");
            }
            
            BLuchar.setEnabled(true);
            BAtacar.setEnabled(false);
            BDefender.setEnabled(false);
            CBIAAvanzada.setEnabled(true);
            CBMIIAAvanzada.setEnabled(true);
            BElegirHeroe.setEnabled(true);
            BElegirEnemigo.setEnabled(true);
        }
        else    // Los dos siguen vivos, seguir combate
        {
            // Si el enemigo no se defendió, que ataque
            if (!enemigoDefiende) atacar1a2(enemigo, heroe, false);
            
            if (!(estaVivo(heroe)) || !(estaVivo(enemigo))) // Si ya ha muerto alguien...
            {
                if (!(estaVivo(heroe))) // Enemigo es el único vivo
                {
                    // Imprimir la vida actual
                    LVidaCombateH.setText(0 + "/" + heroe.getVida());
                    LVidaCombateE.setText(enemigo.getVidaActual() + "/" + enemigo.getVida());

                    // Informar sobre la derrota o victoria
                    TACombate.setText(TACombate.getText() + "\n" + heroe.getNombre() + " ha sufrido una derrota a manos de " + enemigo.getNombre() + ",\nel combate ha terminado en derrota...");
                }
                else
                {
                    // Imprimir la vida actual
                    LVidaCombateH.setText(heroe.getVidaActual() + "/" + heroe.getVida());
                    LVidaCombateE.setText(0 + "/" + enemigo.getVida());
                    TACombate.setText(TACombate.getText() + "\n" + enemigo.getNombre() + " ha sufrido una derrota a manos de " + heroe.getNombre() + ",\nel combate ha terminado en victoria. ¡Felicidades!");
                }

                BLuchar.setEnabled(true);
                BAtacar.setEnabled(false);
                BDefender.setEnabled(false);
                CBIAAvanzada.setEnabled(true);
                CBMIIAAvanzada.setEnabled(true);
                BElegirHeroe.setEnabled(true);
                BElegirEnemigo.setEnabled(true);
            }
            else    // Si después del turno completo los dos siguen vivos...
            {
                // Imprimir todo en la interfaz
                LVidaCombateH.setText(heroe.getVidaActual() + "/" + heroe.getVida());
                LVidaCombateE.setText(enemigo.getVidaActual() + "/" + enemigo.getVida());

                LFatigaCombateH.setText("" + heroe.getFatigaActual());
                LFatigaCombateE.setText("" + enemigo.getFatigaActual());
                TACombate.setText(TACombate.getText() + "\n");
            }
        }
    }//GEN-LAST:event_BAtacarActionPerformed

    private void BDefenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BDefenderActionPerformed
        // TODO add your handling code here:
        int recuperado;
        boolean enemigoDefiende = Dice.roll(2)-1 == 1;  // [0,1], si sale 0 no defiende y si sale 1 sí
        // El enemigo decide que hacer y lo realiza
        if (!enemigoDefiende) atacar1a2(enemigo, heroe, true); // Si el enemigo no se defendió, que ataque
        else    // El enemigo se defiende y tú también...
        {
            TACombate.setText(TACombate.getText() + "\n" + heroe.getNombre() + " y " + enemigo.getNombre() + " deciden defender los dos al mismo tiempo...");
            
            recuperado = heroe.getFatigaActual() - (int)(heroe.getFatigaI() * 1.75);
            heroe.setFatigaActual((recuperado < 0) ? 0 : recuperado);  // Recuperar la fatiga al defenderse
            TACombate.setText(TACombate.getText() + "\n" + heroe.getNombre() + " recupera " + (int)(heroe.getFatigaI() * 1.75) + " de fatiga");
            
            recuperado = enemigo.getFatigaActual() - (int)(enemigo.getFatigaI() * 1.75);
            enemigo.setFatigaActual((recuperado < 0) ? 0 : recuperado);  // Recuperar la fatiga al defenderse
            TACombate.setText(TACombate.getText() + "\n" + enemigo.getNombre() + " recupera " + (int)(enemigo.getFatigaI() * 1.75) + " de fatiga");
        }
        
        if (!(estaVivo(heroe)) || !(estaVivo(enemigo))) // Si ya ha muerto alguien...
        {
            if (!(estaVivo(heroe))) // Enemigo es el único vivo
            {
                // Imprimir la vida actual
                LVidaCombateH.setText(0 + "/" + heroe.getVida());
                LVidaCombateE.setText(enemigo.getVidaActual() + "/" + enemigo.getVida());

                // Informar sobre la derrota o victoria
                TACombate.setText(TACombate.getText() + "\n" + heroe.getNombre() + " ha sufrido una derrota a manos de " + enemigo.getNombre() + ",\nel combate ha terminado en derrota...");
            } else {
                // Imprimir la vida actual
                LVidaCombateH.setText(heroe.getVidaActual() + "/" + heroe.getVida());
                LVidaCombateE.setText(0 + "/" + enemigo.getVida());
                TACombate.setText(TACombate.getText() + "\n" + enemigo.getNombre() + " ha sufrido una derrota a manos de " + heroe.getNombre() + ",\nel combate ha terminado en victoria. ¡Felicidades!");
            }

            BLuchar.setEnabled(true);
            BAtacar.setEnabled(false);
            BDefender.setEnabled(false);
            CBIAAvanzada.setEnabled(true);
            CBMIIAAvanzada.setEnabled(true);
            BElegirHeroe.setEnabled(true);
            BElegirEnemigo.setEnabled(true);
        }
        else // Si después del turno completo los dos siguen vivos...
        {
            // Imprimir todo en la interfaz
            LVidaCombateH.setText(heroe.getVidaActual() + "/" + heroe.getVida());
            LVidaCombateE.setText(enemigo.getVidaActual() + "/" + enemigo.getVida());

            LFatigaCombateH.setText("" + heroe.getFatigaActual());
            LFatigaCombateE.setText("" + enemigo.getFatigaActual());
            TACombate.setText(TACombate.getText() + "\n");
        }
    }//GEN-LAST:event_BDefenderActionPerformed

    public void setHeroe(Personaje j) {heroe = new Personaje(j);}
    public void setHeroe(String n, int v, int a, int d, int p, int f)
    {heroe = new Personaje(n,v,a,d,p,f);}
    
    public void setEnemigo(String n, int v, int a, int d, int p, int f)
    {enemigo = new Personaje(n,v,a,d,p,f);}
    
    public void seCambioPersonaje()
    {
        // Ventana principal
        this.LNombreH.setText("Nombre: " + heroe.getNombre());
        this.LVidaH.setText("Vida: " + heroe.getVida());
        this.LAtaqueH.setText("Ataque: " + heroe.getAtaque());
        this.LDefensaH.setText("Defensa: " + heroe.getDefensa());
        this.LProbCritH.setText("Prob. crítica: " + heroe.getProbCrit());
        this.LFatigaH.setText("Fatiga inicial: " + heroe.getFatigaI());
        this.LVidaCombateH.setText(heroe.getVida() + "/" + heroe.getVida());
        this.LFatigaCombateH.setText("" + heroe.getFatigaI());
        
        this.LNombreE.setText("Nombre: " + enemigo.getNombre());
        this.LVidaE.setText("Vida: " + enemigo.getVida());
        this.LAtaqueE.setText("Ataque: " + enemigo.getAtaque());
        this.LDefensaE.setText("Defensa: " + enemigo.getDefensa());
        this.LProbCritE.setText("Prob. crítica: " + enemigo.getProbCrit());
        this.LFatigaE.setText("Fatiga inicial: " + enemigo.getFatigaI());
        this.LVidaCombateE.setText(enemigo.getVida() + "/" + enemigo.getVida());
        this.LFatigaCombateE.setText("" + enemigo.getFatigaI());
        
        // Ventana héroes
        VElegirHeroe.LNombreH.setText("Nombre: " + heroe.getNombre());
        VElegirHeroe.LVidaH.setText("Vida: " + heroe.getVida());
        VElegirHeroe.LAtaqueH.setText("Ataque: " + heroe.getAtaque());
        VElegirHeroe.LDefensaH.setText("Defensa: " + heroe.getDefensa());
        VElegirHeroe.LProbCritH.setText("Prob. crítica: " + heroe.getProbCrit());
        VElegirHeroe.LFatigaH.setText("Fatiga inicial: " + heroe.getFatigaI());
        VElegirHeroe.LEnemigo.setText("Enemigo actual: " + enemigo.getNombre());
        
        // Ventana enemigos
        VElegirEnemigo.LNombreE.setText("Nombre: " + enemigo.getNombre());
        VElegirEnemigo.LVidaE.setText("Vida: " + enemigo.getVida());
        VElegirEnemigo.LAtaqueE.setText("Ataque: " + enemigo.getAtaque());
        VElegirEnemigo.LDefensaE.setText("Defensa: " + enemigo.getDefensa());
        VElegirEnemigo.LProbCritE.setText("Prob. crítica: " + enemigo.getProbCrit());
        VElegirEnemigo.LFatigaE.setText("Fatiga inicial: " + enemigo.getFatigaI());
        VElegirEnemigo.LHeroe.setText("Héroe actual: " + heroe.getNombre());
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(false);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BAtacar;
    private javax.swing.JButton BDefender;
    private javax.swing.JButton BElegirEnemigo;
    private javax.swing.JButton BElegirHeroe;
    private javax.swing.ButtonGroup BGColores;
    private javax.swing.JButton BLuchar;
    javax.swing.JCheckBox CBIAAvanzada;
    javax.swing.JCheckBoxMenuItem CBMIIAAvanzada;
    private javax.swing.JLabel LAtaqueE;
    private javax.swing.JLabel LAtaqueH;
    private javax.swing.JLabel LDefensaE;
    private javax.swing.JLabel LDefensaH;
    private javax.swing.JLabel LFatigaCombateE;
    private javax.swing.JLabel LFatigaCombateH;
    private javax.swing.JLabel LFatigaE;
    private javax.swing.JLabel LFatigaH;
    private javax.swing.JLabel LNombreE;
    private javax.swing.JLabel LNombreH;
    private javax.swing.JLabel LProbCritE;
    private javax.swing.JLabel LProbCritH;
    private javax.swing.JLabel LVidaCombateE;
    private javax.swing.JLabel LVidaCombateH;
    private javax.swing.JLabel LVidaE;
    private javax.swing.JLabel LVidaH;
    private javax.swing.JMenu MColorArea;
    private javax.swing.JMenuItem MICerrarJuego;
    private javax.swing.JRadioButtonMenuItem RBMIAmarillo;
    private javax.swing.JRadioButtonMenuItem RBMIBlanco;
    private javax.swing.JRadioButtonMenuItem RBMIRojo;
    private javax.swing.JRadioButtonMenuItem RBPersonalizado;
    private javax.swing.JTextArea TACombate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
